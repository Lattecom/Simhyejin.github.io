{"meta":{"title":"JENNY|개발자","subtitle":"Sim Hyejin's IT blog","description":null,"author":"Sim Hyejin","url":"https://simhyejin.github.io"},"pages":[{"title":"about","date":"2016-06-21T04:54:45.000Z","updated":"2016-06-24T03:18:04.000Z","comments":false,"path":"about/index.html","permalink":"https://simhyejin.github.io/about/index.html","excerpt":"","text":"CoolLimeJenny Sim"}],"posts":[{"title":"[블로그 만들기] Hexo 테마 적용하기","slug":"hexo-themes","date":"2016-06-24T07:11:20.000Z","updated":"2016-06-24T10:36:23.000Z","comments":true,"path":"2016/06/24/hexo-themes/","link":"","permalink":"https://simhyejin.github.io/2016/06/24/hexo-themes/","excerpt":"","text":"Hexo는 다양한 테마를 지원해 줍니다. Hexo Themems에서 원하는 테마를 고를 수 있습니다. 데스크탑, 태블릿, 모바일 등 지원 가능한 반응형 테마를 고르기 위해 responsive을 검색하였고 그 중 Hueman이라는 테마를 적용하엿습니다. Hueman 테마 적용하기설치 터미널을 열어 hexo init했던 폴더(이하 blog 폴더)에 들어갑니다. Heuman 테마를 themes/hueman 폴더에 clone합니다. 12$ cd blog$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman blog 폴더에 있는 _config.yml에서 ##Theme 부분을 landscape 에서 hueman 으로 수정합니다. 12## Themes: https://hexo.io/themes/theme: hueman themes/hueman 폴더에 있는 _config.yml.example를 _config.yml로 바꿉니다. (Optional) 최신 버전을 다운 받기위해 pull해줍니다. 12$ cd themes/hueman$ git pull (Optional) Hueman 테마의 Insight Search 검색엔진을 사용하기위해 npm으로 hexo-generator-json-content을 설치합니다. 1$ npm install -S hexo-generator-json-content 설정themes/hueman 폴더에 있는 _config.yml에서 아래의 테마 설정을 바꿀 수 있습니다. Theme Meun Customize(Logo, Thema Color, Highlight, Sidebar, Thumbnail, Favicon, Social Links) Widgets : Recent Posts, Category, Archive, Tag, Tag Cloud, Links Search Comment : Disqus Share Plugins Miscellaneous - Theme Color저는 제 로고의 보라색을 따와 Theme Color를 보라색으로 설정했습니다.Hueman 테마의 Theme Color는 오른쪽 사이드바의 Follow영역의 색을 바꾸게 해줍니다.또한 Theme Color는 이외에도 여러군데 사용이됩니다. 게시물 hover 글자 드래그 링크등이 Theme Color가 적용됩니다.저의 Theme Color 보라색인 링크 글씨과 검은색 글씨의 눈으로 보기에 차이가 나지않아서 링크 글씨의 색을 지금 보이는 것과 같은 하늘색으로 바꾸었습니다. [링크 색 바꾸기] themes/hueman/source/css/_partial 폴더의 article.styl 파일을 수정하면 됩니다. 123.article-entry a //링크 color: \"원하는색상\" 이 외에도 styl 파일을 수정하면 커스터마이징 가능합니다. - Thumbnailthemes/hueman 폴더에 있는 _config.yml에서 true, false 로 설정 할 수 있습니다.12customize: thumbnail: true # enable posts thumbnail, options: true, false 포스트에 thumbnail 추가하기themes/hueman/source/css/images에 이미지 파일을 넣고 포스트 font-matter에 thumbnail을 추가하고 이미지 경로를 넣어줍니다.12345---title: \"[블로그 만들기] Hexo 테마 적용하기\"date: 2016-06-24 16:11:20thumbnail: /css/images/hueman.jpg--- 혹은 이미지 url인 경우에는 thumbnail을 추가하고 이미지 경로 url을 넣어줍니다.12345---title: \"[블로그 만들기] Hexo 테마 적용하기\"date: 2016-06-24 16:11:20thumbnail: https://example.com/image.jpg--- - Disqusthemes/hueman 폴더에 있는 _config.yml에서 #Comment 부분의 disqus 에 disqus shortname을 적어줍니다.123# Commentcomment: disqus: [Disqus Shortname] # enter disqus shortname here [ShortName 만들기 및 확인하기]먼저 Disqus 계정이 있어야합니다. 회원가입 또는 SNS(페이스북, 트위터, 구글)로 로그인 가능합니다. Get Started 클릭 후 블로그 이름 설정(예시: aaaaba)[※블로그 이름이 Short Name으로 설정됩니다] 왼쪽 General 클릭하면 ShortName 확인 할수 있습니다.","categories":[{"name":"Blog","slug":"Blog","permalink":"https://simhyejin.github.io/categories/Blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://simhyejin.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://simhyejin.github.io/tags/blog/"},{"name":"themes","slug":"themes","permalink":"https://simhyejin.github.io/tags/themes/"},{"name":"hueman","slug":"hueman","permalink":"https://simhyejin.github.io/tags/hueman/"},{"name":"thumbnail","slug":"thumbnail","permalink":"https://simhyejin.github.io/tags/thumbnail/"},{"name":"disqus","slug":"disqus","permalink":"https://simhyejin.github.io/tags/disqus/"},{"name":"theme color","slug":"theme-color","permalink":"https://simhyejin.github.io/tags/theme-color/"}]},{"title":"[Markdown] title 대괄호[] 사용하기","slug":"post-title","date":"2016-06-24T06:22:11.000Z","updated":"2016-06-24T07:06:26.000Z","comments":true,"path":"2016/06/24/post-title/","link":"","permalink":"https://simhyejin.github.io/2016/06/24/post-title/","excerpt":"","text":"Hexo로 블로그를 운영하며 마크다운(Markdown)을 사용하여 포스트를 작성하고 있습니다.포스트 제목 앞에 대괄호를 썻더니 오류가 발생하였습니다. 이에 대한 해결방안을 가져왔습니다. YAMLException: can not read a block mapping entry 해결하기위 사진과 같이 포스트를 작성할 때 title 앞에 대괄호를 넣으면 아래와 같은 Error가 발생합니다. 1234ERROR Process failed: _posts/test.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 2, column 5: date: 2016-06-24 15:19:38 ^ 해결방법은 간단합니다.아래와 같이 title을 “” 큰따옴표 or ‘’ 작은따옴표로 감싸주시면 됩니다. 문제해결 완료 :)","categories":[{"name":"Blog","slug":"Blog","permalink":"https://simhyejin.github.io/categories/Blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://simhyejin.github.io/tags/hexo/"},{"name":"post","slug":"post","permalink":"https://simhyejin.github.io/tags/post/"},{"name":"title","slug":"title","permalink":"https://simhyejin.github.io/tags/title/"},{"name":"markdown","slug":"markdown","permalink":"https://simhyejin.github.io/tags/markdown/"}]},{"title":"OWASP TOP 10 (2013)","slug":"owasp13","date":"2016-06-22T06:01:47.000Z","updated":"2016-06-24T03:18:00.000Z","comments":true,"path":"2016/06/22/owasp13/","link":"","permalink":"https://simhyejin.github.io/2016/06/22/owasp13/","excerpt":"","text":"OWASPOWASP(Open Web Application Security Project)는 신뢰할 수있는 애플리케이션을 개발 및 유지보수하기 위해 노력하는 오픈 커뮤니티입니다. 주로 애플리케이션에 관한 정보노출, 악성 파일 및 스크립트, 보안 취약점 등을 연구하며, 10대 웹 애플리케이션의 취약점(OWASP TOP 10)을 발표합니다. Top 10 프로젝트의 목표는 조직에서 직면한 가장 중요한 몇 가지 위험요소를 식별해 애플리케이션 보안에 대한 인식을 향상시키는 데 있습니다. OWASP TOP 10은 웹 애플리케이션 취약점 중에서 빈도가 높고, 보안상 영향을 크게 줄 수 있는 것들 10가지를 선정하여 2004년, 2007년, 2010년, 2013년을 기준으로 발표하고 있습니다. OWASP의 모든 문서는 애플리케이션 보안성 향상에 관심 있는 모두에게 무료이며 OWASP홈페이지에서 확인 가능합니다. 2016년 OWASP TOP 10이 나오기 전에 2013 OWASP TOP 10을 살펴 보려고 합니다. 2010 과 2013 OWASP TOP 10 비교 2013 OWASP TOP 10 A1 : Injection (인젝션, 삽입)SQL, 운영체제, LDAP 인젝션 취약점은 신뢰할 수 없는 데이터가 명령어나 질의문의 일부분으로서 인터프리터로 보내질 때 발생한다. 공격자의 악의적인 데이터는 예상하지 못하는 명령을 실행하거나 적절한 권한 없이 데이터에 접근하도록 인터프리터를 속일 수 있다. A2 : Broken Authentication and Session Management (취약한 인증 및 세션 관리)인증과 세션 관리와 관련된 애플리케이션 기능은 정확하게 구현되어 있지 않아서, 공격자가 패스워드, 키 또는 세션 토큰을 해킹하거나 다른 구현 취약점을 공격하여 다른 사용자 ID로가장할 수 있다. A3 : Cross-Site Scripting (XSS, 크로스 사이트 스크립팅)XSS 취약점은 애플리케이션이 신뢰할 수 없는 데이터를 가져와 적절한 검증이나 제한 없이 웹 브라우저로 보낼 때 발생한다. XSS는 공격자가 피해자의 브라우저에 스크립트를 실행하여 사용자 세션 탈취, 웹 사이트 변조, 악의적인 사이트로 이동할 수 있다. A4 : Insecure Direct Object References (안전하지 않은 직접 객체 참조)직접 객체 참조는 개발자가 파일, 디렉토리, 데이터베이스 키와 같은 내부 구현 객체를 참조하는 것을 노출시킬 때 발생한다. 접근 통제를 통한 확인이나 다른 보호수단이 없다면, 공격자는 노출된 참조를 조작하여 허가 받지 않은 데이터에 접근할 수 있다. A5 : Security Misconfiguration (보안 설정 오류)훌륭한 보안은 애플리케이션, 프레임워크, 애플리케이션 서버, 웹 서버, 데이터베이스 서버 및 플랫폼에 대해 보안 설정이 정의되고 적용되어 있다. 기본으로 제공되는 값은 종종 안전하지 않기 때문에 보안 설정은 정의, 구현 및 유지되어야 한다. 또한 소프트웨어는 최신의 상태로 유지해야 한다. A6 : Sensitive Data Exposure (민감 데이터 노출)많은 웹 애플리케이션들이 신용카드, 개인 식별 정보 및 인증 정보와 같은 중요한 데이터를 제대로 보호하지 않는다. 공격자는 신용카드 사기, 신분 도용 또는 다른 범죄를 수행하는 등 약하게 보호된 데이터를 훔치거나 변경할 수 있다. 중요 데이터가 저장 또는 전송 중이거나 브라우저와 교환하는 경우 특별히 주의하여야 하며, 암호화와 같은 보호조치를 취해야 한다. A7 : Missing Function Level Access Control (기능 수준의 접근통제 누락)대부분의 웹 애플리케이션은 UI에 해당 기능을 보이게 하기 전에 기능 수준의 접근권한을 확인한다. 그러나, 애플리케이션은 각 기능에 접근하는 서버에 동일한 접근통제 검사를 수행한다. 요청에 대해 적절히 확인하지 않을 경우 공격자는 적절한 권한 없이 기능에 접근하기 위한 요청을 위조할 수 있다. A8 : Cross-Site Request Forgery (CSRF, 크로스 사이트 요청 위조)CSRF 공격은 로그온 된 피해자의 취약한 웹 애플리케이션에 피해자의 세션 쿠키와 기타 다른 인증정보를 자동으로 포함하여 위조된 HTTP 요청을 강제로 보내도록 하는 것이다.이것은 공격자가 취약한 애플리케이션이 피해자로부터의 정당한 요청이라고 오해할 수 있는 요청들을 강제로 만들 수 있다. A9 : Using Components with Known Vulnerabilities (취약점이 있는 컴포넌트 사용)컴포넌트, 라이브러리, 프레임워크 및 다른 소프트웨어 모듈은 대부분 항상 전체 권한으로 실행된다. 이러한 취약한 컴포넌트를 악용하여 공격하는 경우 심각한 데이터 손실이발생하거나 서버가 장악된다. 알려진 취약점이 있는 컴포넌트를 사용하는 애플리케이션은 애플리케이션 방어 체계를 손상하거나, 공격 가능한 범위를 활성화하는 등의 영향을 미친다. A10 : Unvalidated Redirects and Forwards (검증되지 않은 리다이렉트 및 포워드)웹 애플리케이션은 종종 사용자들을 다른 페이지로 리다이렉트 하거나 포워드하고, 대상 페이지를 결정하기 위해 신뢰할 수 없는 데이터를 사용한다. 적절한 검증 절차가 없으면 공격자는 피해자를 피싱 또는 악성코드 사이트로 리다이렉트 하거나 승인되지 않은 페이지에 접근하도록 전달할 수 있다. 참조 OWASP TOP 10https://www.owasp.org/index.php/Top10#OWASP_Top_10_for_2013https://www.owasp.org/images/2/2c/OWASP_Top_10_-_2013_Final_-_Korean.pdf","categories":[{"name":"CSE","slug":"CSE","permalink":"https://simhyejin.github.io/categories/CSE/"},{"name":"보안","slug":"CSE/보안","permalink":"https://simhyejin.github.io/categories/CSE/보안/"}],"tags":[{"name":"owasp","slug":"owasp","permalink":"https://simhyejin.github.io/tags/owasp/"},{"name":"security","slug":"security","permalink":"https://simhyejin.github.io/tags/security/"}]},{"title":"[블로그 만들기] GitHub pages + Hexo","slug":"hexo-git","date":"2016-06-20T07:37:00.000Z","updated":"2016-06-24T07:29:23.000Z","comments":true,"path":"2016/06/20/hexo-git/","link":"","permalink":"https://simhyejin.github.io/2016/06/20/hexo-git/","excerpt":"","text":"GitHub PagesGitHub Pages는 GitHub에서 무료로 호스팅하는 공개 웹페이지입니다.GitHub의 저장소에서 개인이나 조직 또는 프로젝트 페이지를 호스팅하도록 설계되어 있습니다.GitHub에서 제공하는 페이지 제작 도구로 쉽게 페이지를 만들어 공개할 수도 있고, 로컬에서 git을 이용해 수동으로 만들 수도 있습니다. GitHub Pages의 종류는 크게 두가지로 나뉩니다. 개인 사이트 GitHub Pages 프로젝트 사이트 GitHub Pages 개인 사이트는 &lt;username&gt;.github.io라는 저장소를 만들게되면 자동으로 개인 사이트를 위한 GitHub Pages를 만들 수 있습니다.이 사이트의 저장소 브랜치는 master에서 만들어져야 합니다. 프로젝트 사이트는 GitHub에 등록한 프로젝트별로 사이트를 자동으로 만들 수 있습니다.프로젝트 사이트는 &lt;username&gt;.github.io/[프로젝트 저장소 이름]으로 만들어집니다.사이트의 저장소를 위한 브랜치가 gh-pages라는 브랜치이여야 합니다. 이 블로그는 개인 사이트 Github Pages로 Github 저장소의 이름을 simhyejin.github.io로 설정하여 만들었습니다. GitHub Pages에 대한 자세한 내용은 GitHub help에서 확인할 수 잇습니다. Git pages에 Hexo 적용먼저 hexo-deployer-git을 설치합니다. 1$ npm install hexo-deployer-git --save ERROR Deployer not found: git 주의!hexo-deployer-git을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다. 그 다음 _config.ym 파일을 열어 #deploymeny 부분을 수정합니다. 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/Simhyejin/Simhyejin.github.io.git branch: master repo : GitHub repository URLbranch : 브랜치 이름message : 커밋 내용. 커스터마이징 가능합니다. (Site updated:’YYYY-MM-DD HH:mm:ss’ 로 기본 설정되있습니다.)","categories":[{"name":"Blog","slug":"Blog","permalink":"https://simhyejin.github.io/categories/Blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://simhyejin.github.io/tags/hexo/"},{"name":"github-pages","slug":"github-pages","permalink":"https://simhyejin.github.io/tags/github-pages/"},{"name":"git","slug":"git","permalink":"https://simhyejin.github.io/tags/git/"},{"name":"deployer","slug":"deployer","permalink":"https://simhyejin.github.io/tags/deployer/"}]},{"title":"[블로그 만들기] Hexo 정적 블로그 프레임워크","slug":"Hexo-start","date":"2016-06-20T05:16:39.000Z","updated":"2016-06-24T07:29:08.000Z","comments":true,"path":"2016/06/20/Hexo-start/","link":"","permalink":"https://simhyejin.github.io/2016/06/20/Hexo-start/","excerpt":"","text":"블로그 시작을 위해 사용하였던 Hexo 를 소개합니다. Hexohexo는 Node.js 기반 정적 블로그 프레임워크 입니다. 마크다운(Markdown)을 지원하여 손쉬운 포스트 작성 가능 GitHub Pages를 이용한 호스팅을 지원 다양한 테마 제공 등 의 장점으로 이 블로그 또한 GitHub Pages와 Hexo를 통해 제작되었습니다. Hexo 설치Hexo를 설치 하기 위해서는 Node.js와 Git이 설치 되어 있어야합니다.아래의 링크를 통해 설치가 가능합니다. Node.js Git Node.js와 Git이 설치되어 있다면 이제 Hexo를 설치할 수 있습니다.터미널을 열어 명령어를 통해 Hexo를 설치합니다. 1$ npm install -g hexo-cli 설치Hexo가 설치 되었다면 아래의 명령어를 통해 Hexo 폴더를 초기 설정합니다.(디렉토리명은 Github repo 이름과 달라도 무관합니다.) 123$ hexo init &lt;디렉토리명&gt;$ cd &lt;디렉토리명&gt;$ npm install 위 과정이 끝나면 폴더안에 아래의 파일이 생성됩니다. 12345678.├── _config.yml : 사이트 설정 파일. 대부분의 설정 할 수 있습니다. ├── package.json : 응용 프로그램 데이터. ├── scaffolds : 새 게시물을 작성하면 Hexo는 scaffolds 폴더에 새로운 파일을 기반으로 하고 있습니다.├── source : 소스 폴더. 사이트 콘텐츠를 넣어두는 폴더입니다.| ├── _drafts | └── _posts └── themes : 테마 폴더. Hexo는 테마와 콘텐츠를 결합하여 정적 웹 사이트를 생성합니다. 실행모든 설치가 끝났다면 내장 서버를 돌려봅니다. 1$ hexo server localhost:4000을 통해 확인합니다.(기본포트 : 4000) 자주 쓰는 명령어New post새로운 포스트 생성 1$ hexo new \"My New Post\" Generate정적 파일 생성 1$ hexo generate 또는 1$ hexo g Opition으로-d , –deploy : generate가 끝난후 deploy-w , –watch : 파일 변화 확인 deploy원격 사이트에 올리기 1$ hexo deploy 또는 1$ hexo d Opition으로-g , –generate : deploy 전에 generate 그 외에는 Hexo Commands에서 확인 할 수 있습니다.","categories":[{"name":"Blog","slug":"Blog","permalink":"https://simhyejin.github.io/categories/Blog/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://simhyejin.github.io/tags/hexo/"},{"name":"blog","slug":"blog","permalink":"https://simhyejin.github.io/tags/blog/"},{"name":"정적 블로그 프레임워크","slug":"정적-블로그-프레임워크","permalink":"https://simhyejin.github.io/tags/정적-블로그-프레임워크/"}]}]}